import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.layers import Input, Dense, LeakyReLU
from tensorflow.keras.models import Model
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error
csv_file = "BostonHousing.csv"  
df = pd.read_csv(csv_file)
print("Original DataFrame:")
print(df.shape)
for col in df.select_dtypes(include=['object']).columns:
    df[col] = LabelEncoder().fit_transform(df[col])
X = df.iloc[:, :-1].values  
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_train, X_test = train_test_split(X_scaled, test_size=0.2, random_state=42)
input_dim = X.shape[1]
encoding_dim = 8  
input_layer = Input(shape=(input_dim,))
encoded = Dense(64)(input_layer)
encoded = LeakyReLU()(encoded)
encoded = Dense(32)(encoded)
encoded = LeakyReLU()(encoded)
encoded = Dense(encoding_dim)(encoded)
encoded = LeakyReLU()(encoded)
decoded = Dense(32)(encoded)
decoded = LeakyReLU()(decoded)
decoded = Dense(64)(decoded)
decoded = LeakyReLU()(decoded)
decoded = Dense(input_dim, activation='sigmoid')(decoded)
autoencoder = Model(input_layer, decoded)
autoencoder.compile(optimizer='adam', loss='mse')
autoencoder.fit(X_train, X_train, epochs=20, batch_size=32,validation_data=(X_test, X_test))
encoder = Model(input_layer, encoded)
X_compressed = encoder.predict(X_test)
X_reconstructed = autoencoder.predict(X_test)
print("Transformed DataFrame:")
print(pd.DataFrame(X_compressed).shape)
plt.scatter(X_compressed[:, 0], X_compressed[:, 1], cmap='viridis')
plt.colorbar()
plt.title("2D Representation using Autoencoder")
plt.show()
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
mse = mean_squared_error(X_test, X_reconstructed)
rmse = np.sqrt(mse)
mae = mean_absolute_error(X_test, X_reconstructed)
r2 = r2_score(X_test, X_reconstructed)
print(f"Mean Squared Error (MSE): {mse}")
print(f"Root Mean Squared Error (RMSE): {rmse}")
print(f"Mean Absolute Error (MAE): {mae}")
print(f"R-squared (R2): {r2}")

